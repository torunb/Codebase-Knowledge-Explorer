{
    "code": "```python\nimport os\nfrom dotenv import load_dotenv\nimport openai\n\n# Load environment variables from .env file\nload_dotenv()\nOPENAI_API_KEY = os.getenv(\"OPENAI_API_KEY\")\n\n# Ensure the API key is set\nif not OPENAI_API_KEY:\n    raise RuntimeError(\"OPENAI_API_KEY is not set in the environment variables.\")\n\n# Initialize the OpenAI Client\nopenai.api_key = OPENAI_API_KEY\n\nclass OpenAIIntegration:\n    def __init__(self):\n        self.client = openai\n\n    def get_chat_response(self, prompt, role=\"user\"):\n        \"\"\"Send a prompt to the OpenAI GPT API and get a response.\"\"\"\n        system_message = \"You are an expert code reviewer. Provide feedback on the given prompt.\"\n        try:\n            completion = self.client.ChatCompletion.create(\n                model=\"gpt-4\",\n                messages=[\n                    {\"role\": \"system\", \"content\": system_message},\n                    {\"role\": role, \"content\": prompt}\n                ],\n                temperature=0.2,\n                max_tokens=10\n            )\n            return completion.choices[0].message[\"content\"]\n        except Exception as e:\n            print(f\"Error occurred: {str(e)}\")\n            return None\n\n# Example usage\nif __name__ == \"__main__\":\n    openai_integration = OpenAIIntegration()\n    user_prompt = \"Can you review my Python function for calculating factorials?\"\n    response = openai_integration.get_chat_response(user_prompt)\n    if response:\n        print(\"GPT-4 Response:\", response)\n```\n\n*Note: Include a `.env` file containing `OPENAI_API_KEY=<your_api_key>` for this code to function.*"
}